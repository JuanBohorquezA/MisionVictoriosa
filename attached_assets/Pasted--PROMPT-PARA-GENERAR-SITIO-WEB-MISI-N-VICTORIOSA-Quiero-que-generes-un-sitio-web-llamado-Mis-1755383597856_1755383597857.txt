🟨🟦 PROMPT PARA GENERAR SITIO WEB "MISIÓN VICTORIOSA"

Quiero que generes un sitio web llamado “Misión Victoriosa” usando únicamente:

Frontend: HTML, CSS y JavaScript puro (sin frameworks)

Backend: Python puro (puedes usar Flask si lo crees necesario, pero nada más)

🎨 Paleta de colores:

Usa una paleta clara con los siguientes tonos:

Amarillo claro (#FFEB3B o #FFF9C4)

Azul claro (#64B5F6 o #BBDEFB)

Blanco y gris claro para fondos o texto secundario

📁 Estructura del sitio:
1. Secciones públicas (accesibles sin login):

Sobre Nosotros

Nuestros Proyectos (muestra todos los proyectos desde la base de datos, con sus imágenes)

Contáctenos (formulario simple de contacto)

🔐 Autenticación:

Agrega un botón para iniciar sesión en la parte izquierda de la pantalla

No se debe permitir el registro público

Crear un usuario administrador inicial por medio de un archivo de seed:

username: admin

password: admin123 (hasheada)

Cuando este usuario inicie sesión podrá:

Acceder al módulo de administración

Crear nuevos usuarios (no eliminar el inicial)

Crear, editar y eliminar proyectos

📦 Base de Datos (usar SQLite o similar):
Tabla: usuarios

id (entero, autoincremental)

username (texto, único)

password_hash (texto)

Tabla: proyectos

id (entero, autoincremental)

titulo (texto)

descripcion (texto)

imagen (campo binario – la imagen debe guardarse como BLOB, no como ruta o URL)

La imagen debe poder ser recuperada desde la base de datos y mostrarse directamente en la interfaz.

🧩 Funcionalidades requeridas:
Visitantes (no autenticados):

Pueden visualizar:

Sección "Sobre Nosotros"

Todos los proyectos con sus imágenes

Formulario "Contáctenos"

Usuarios autenticados:

Pueden:

Crear, editar y eliminar proyectos

Subir imagen por proyecto (la imagen se guarda en base de datos, no como URL)

Crear nuevos usuarios

🖥️ Frontend (solo HTML, CSS, JS vanilla):

Diseño responsive opcional

Interfaz clara con los colores mencionados

Botón de login visible en todo momento (parte izquierda de la pantalla)

Login mediante fetch (POST) hacia backend

Mostrar/ocultar panel administrativo según sesión activa

⚙️ Backend (Python):

Endpoints protegidos para administración (requiere login)

Guardar contraseñas hasheadas (hashlib o bcrypt)

Imágenes subidas por el usuario deben guardarse como datos binarios en la base de datos y mostrarse usando blobs desde el backend

🔐 Seguridad:

Validación de sesión (puede ser con cookies o token simple)

Solo usuarios autenticados deben poder acceder al CRUD de proyectos y creación de usuarios

🧪 Consideraciones finales:

No permitir eliminar el usuario inicial

No permitir registro libre

El sistema debe funcionar correctamente aunque no haya sesión activa (modo visitante)

✅ Este prompt ya incluye todas las especificaciones técnicas y funcionales. Puedes copiarlo tal cual para pasárselo a una IA generadora de código o usarlo como base para dividir el proyecto por módulos. ¿Te gustaría que también te prepare un archivo schema.sql o un seed.py como ejemplo?

Dijiste:
pero el boton de login debe ser publico
ChatGPT dijo:

Perfecto, gracias por aclarar. Aquí tienes el prompt final y completo, listo para entregar a una IA generadora de código, incorporando todos los requisitos, incluyendo que el botón de login debe ser público y siempre visible, incluso para usuarios no autenticados.

🟨🟦 PROMPT PARA GENERAR SITIO WEB "MISIÓN VICTORIOSA"

Crea un sitio web llamado “Misión Victoriosa” con las siguientes características:

🔧 TECNOLOGÍAS

Frontend: HTML, CSS y JavaScript puro (sin frameworks)

Backend: Python (puedes usar Flask, pero sin frameworks adicionales)

🎨 PALETA DE COLORES (CLARA)

Amarillo claro (#FFEB3B o #FFF9C4)

Azul claro (#64B5F6 o #BBDEFB)

Blanco como fondo principal

Tonos grises claros para texto o contenedores secundarios

🧭 ESTRUCTURA DEL SITIO
1. Secciones públicas (no requieren login):

Sobre Nosotros

Nuestros Proyectos (leer desde base de datos, incluir imagen)

Contáctenos (formulario de contacto simple)

Botón de login (ubicado visiblemente en la parte izquierda del sitio, accesible siempre)

Estas secciones deben estar accesibles a cualquier visitante sin necesidad de iniciar sesión.

2. Autenticación

Implementa login mediante botón público en la parte izquierda.

No permitir registro público.

Crea un usuario administrador inicial mediante un archivo de seed:

username: admin

password: admin123 (guardar hasheado)

Una vez logueado, el usuario puede:

Crear nuevos usuarios

Crear, editar y eliminar proyectos

🗃️ BASE DE DATOS

Usar SQLite o similar. Crear dos tablas principales:

Tabla: usuarios

id (PK, autoincremental)

username (texto, único)

password_hash (texto)

Tabla: proyectos

id (PK, autoincremental)

titulo (texto)

descripcion (texto)

imagen (tipo BLOB – guardar la imagen completa en la base de datos, no una URL)

Las imágenes deben recuperarse desde la base de datos y mostrarse correctamente en el frontend (por ejemplo, como base64).

⚙️ FUNCIONALIDADES
Para visitantes (sin login):

Ver sección "Sobre Nosotros"

Ver todos los proyectos, incluyendo sus imágenes

Acceder al formulario de contacto

Ver y usar el botón de login

Para usuarios autenticados:

Acceso a un panel de administración

Crear, editar y eliminar proyectos

Subir imagen (guardarla como BLOB)

Crear nuevos usuarios (no eliminar al usuario inicial)

Cierre de sesión

🖼️ FRONTEND

Usar HTML/CSS/JS vanilla (sin librerías)

Diseño limpio, claro y minimalista, siguiendo los colores dados

Layout simple con navegación básica

Botón de login visible siempre en la parte izquierda

Al loguearse, mostrar opciones adicionales como:

"Agregar proyecto"

"Editar proyecto"

"Eliminar proyecto"

"Crear usuario"

🔐 SEGURIDAD

Hashear contraseñas (bcrypt o hashlib)

Rutas protegidas para el panel de administración

El usuario inicial no debe ser eliminable

Sesión basada en cookies o token simple

Si no hay sesión activa, ocultar panel de administración

🧪 NOTAS ADICIONALES

No debe romperse si no hay usuarios logueados

El botón de login siempre debe estar visible y disponible para cualquier visitante

El sistema debe seguir funcionando en modo visitante sin errores