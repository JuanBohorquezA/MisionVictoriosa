{"file_contents":{"app.py":{"content":"import os\nimport logging\nimport base64\nfrom flask import Flask, render_template, request, redirect, url_for, session, flash, make_response\nfrom flask_sqlalchemy import SQLAlchemy\nfrom sqlalchemy.orm import DeclarativeBase\nfrom werkzeug.security import generate_password_hash, check_password_hash\nfrom werkzeug.utils import secure_filename\nfrom werkzeug.middleware.proxy_fix import ProxyFix\nfrom functools import wraps\n\n# Configure logging\nlogging.basicConfig(level=logging.DEBUG)\n\n\nclass Base(DeclarativeBase):\n    pass\n\n\ndb = SQLAlchemy(model_class=Base)\n\n# create the app\napp = Flask(__name__)\napp.secret_key = os.environ.get(\"SESSION_SECRET\", \"dev-secret-key-change-in-production\")\napp.wsgi_app = ProxyFix(app.wsgi_app, x_proto=1, x_host=1)  # needed for url_for to generate with https\n\n# configure the database, relative to the app instance folder\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = os.environ.get(\"DATABASE_URL\")\napp.config[\"SQLALCHEMY_ENGINE_OPTIONS\"] = {\n    \"pool_recycle\": 300,\n    \"pool_pre_ping\": True,\n}\n# initialize the app with the extension, flask-sqlalchemy >= 3.0.x\ndb.init_app(app)\n\nwith app.app_context():\n    # Make sure to import the models here or their tables won't be created\n    import models  # noqa: F401\n\n    db.create_all()\n\ndef login_required(f):\n    \"\"\"Decorator to require login for protected routes\"\"\"\n    @wraps(f)\n    def decorated_function(*args, **kwargs):\n        if 'user_id' not in session:\n            flash('Debe iniciar sesión para acceder a esta página.', 'error')\n            return redirect(url_for('login'))\n        return f(*args, **kwargs)\n    return decorated_function\n\ndef admin_required(f):\n    \"\"\"Decorator to require admin privileges\"\"\"\n    @wraps(f)\n    def decorated_function(*args, **kwargs):\n        if 'user_id' not in session:\n            flash('Debe iniciar sesión para acceder a esta página.', 'error')\n            return redirect(url_for('login'))\n        if session.get('username') != 'admin':\n            flash('Solo el administrador puede acceder a esta función.', 'error')\n            return redirect(url_for('admin'))\n        return f(*args, **kwargs)\n    return decorated_function\n\n@app.route('/')\ndef index():\n    \"\"\"Home page with public sections\"\"\"\n    from models import Proyecto, Recurso\n    \n    # Get all projects for public display\n    projects = Proyecto.query.order_by(Proyecto.id.desc()).all()\n    \n    # Convert BLOB images to base64 for display and get additional resources\n    projects_with_images = []\n    for project in projects:\n        project_dict = {\n            'id': project.id,\n            'titulo': project.titulo,\n            'descripcion': project.descripcion\n        }\n        \n        # Get main image (legacy)\n        if project.imagen:\n            image_data = base64.b64encode(project.imagen).decode('utf-8')\n            project_dict['imagen_base64'] = f\"data:image/jpeg;base64,{image_data}\"\n        else:\n            project_dict['imagen_base64'] = None\n        \n        # Get additional resources (images)\n        recursos = Recurso.query.filter_by(\n            proyecto_id=project.id, \n            tipo='imagen'\n        ).order_by(Recurso.orden, Recurso.id).all()\n        \n        project_dict['recursos'] = []\n        for recurso in recursos:\n            if recurso.contenido:\n                resource_data = base64.b64encode(recurso.contenido).decode('utf-8')\n                project_dict['recursos'].append({\n                    'id': recurso.id,\n                    'nombre': recurso.nombre,\n                    'imagen_base64': f\"data:image/jpeg;base64,{resource_data}\",\n                    'orden': recurso.orden\n                })\n        \n        # Create combined images list (main image + resources)\n        project_dict['todas_imagenes'] = []\n        if project_dict['imagen_base64']:\n            project_dict['todas_imagenes'].append({\n                'id': 'main',\n                'nombre': 'Imagen principal',\n                'imagen_base64': project_dict['imagen_base64'],\n                'orden': -1\n            })\n        project_dict['todas_imagenes'].extend(project_dict['recursos'])\n        \n        projects_with_images.append(project_dict)\n    \n    is_authenticated = 'user_id' in session\n    return render_template('index.html', projects=projects_with_images, is_authenticated=is_authenticated)\n\n@app.route('/login', methods=['GET', 'POST'])\ndef login():\n    \"\"\"Login page and authentication\"\"\"\n    if request.method == 'POST':\n        username = request.form['username']\n        password = request.form['password']\n        \n        from models import Usuario\n        user = Usuario.query.filter_by(username=username).first()\n        \n        if user and check_password_hash(user.password_hash, password):\n            session['user_id'] = user.id\n            session['username'] = user.username\n            flash('Inicio de sesión exitoso.', 'success')\n            return redirect(url_for('admin'))\n        else:\n            flash('Usuario o contraseña incorrectos.', 'error')\n    \n    return render_template('login.html')\n\n@app.route('/logout')\ndef logout():\n    \"\"\"Logout and clear session\"\"\"\n    session.clear()\n    flash('Sesión cerrada exitosamente.', 'success')\n    return redirect(url_for('index'))\n\n@app.route('/admin')\n@login_required\ndef admin():\n    \"\"\"Admin dashboard\"\"\"\n    from models import Proyecto, Usuario\n    \n    # Get all projects\n    projects = Proyecto.query.order_by(Proyecto.id.desc()).all()\n    \n    # Get all users\n    users = Usuario.query.order_by(Usuario.id).all()\n    \n    return render_template('admin.html', projects=projects, users=users)\n\n@app.route('/admin/project/new', methods=['GET', 'POST'])\n@login_required\ndef new_project():\n    \"\"\"Create new project\"\"\"\n    if request.method == 'POST':\n        from models import Proyecto, Recurso\n        \n        titulo = request.form['titulo']\n        descripcion = request.form['descripcion']\n        imagen_file = request.files.get('imagen')\n        \n        # Debug logging\n        app.logger.info(f\"Creating new project: {titulo}\")\n        app.logger.info(f\"Image file: {imagen_file.filename if imagen_file else 'None'}\")\n        app.logger.info(f\"Files in request: {list(request.files.keys())}\")\n        app.logger.info(f\"Form data: {dict(request.form)}\")\n        app.logger.info(f\"All files data: {[(k, v.filename if v and hasattr(v, 'filename') else str(v)) for k, v in request.files.items()]}\")\n        \n        # Debug - check if imagen field is in files but empty\n        if 'imagen' in request.files:\n            imagen_debug = request.files['imagen']\n            app.logger.info(f\"Imagen field exists - filename: '{imagen_debug.filename}', size: {len(imagen_debug.read()) if imagen_debug else 0}\")\n            imagen_debug.seek(0)  # Reset file pointer\n        \n        # Create project\n        imagen_blob = None\n        if imagen_file and imagen_file.filename and imagen_file.filename.strip():\n            imagen_blob = imagen_file.read()\n            app.logger.info(f\"Main image size: {len(imagen_blob)} bytes\")\n        else:\n            app.logger.info(\"No main image provided or empty filename\")\n        \n        proyecto = Proyecto()\n        proyecto.titulo = titulo\n        proyecto.descripcion = descripcion\n        proyecto.imagen = imagen_blob\n        db.session.add(proyecto)\n        db.session.flush()  # Get the ID before commit\n        \n        # Handle multiple additional images\n        imagenes_adicionales = request.files.getlist('imagenes_adicionales')\n        app.logger.info(f\"Additional images count: {len(imagenes_adicionales)}\")\n        orden = 1\n        for imagen_adicional in imagenes_adicionales:\n            if imagen_adicional and imagen_adicional.filename and imagen_adicional.filename.strip():\n                imagen_content = imagen_adicional.read()\n                if imagen_content:  # Only save if there's actual content\n                    app.logger.info(f\"Saving resource: {imagen_adicional.filename}, size: {len(imagen_content)} bytes\")\n                    recurso = Recurso()\n                    recurso.proyecto_id = proyecto.id\n                    recurso.tipo = 'imagen'\n                    recurso.nombre = imagen_adicional.filename\n                    recurso.contenido = imagen_content\n                    recurso.orden = orden\n                    db.session.add(recurso)\n                    orden += 1\n        \n        db.session.commit()\n        flash('Proyecto creado exitosamente.', 'success')\n        return redirect(url_for('admin'))\n    \n    return render_template('project_form.html', project=None, action='Crear')\n\n@app.route('/admin/project/<int:project_id>/edit', methods=['GET', 'POST'])\n@login_required\ndef edit_project(project_id):\n    \"\"\"Edit existing project\"\"\"\n    from models import Proyecto, Recurso\n    \n    proyecto = Proyecto.query.get_or_404(project_id)\n    \n    if request.method == 'POST':\n        titulo = request.form['titulo']\n        descripcion = request.form['descripcion']\n        imagen_file = request.files.get('imagen')\n        \n        # Update project data\n        proyecto.titulo = titulo\n        proyecto.descripcion = descripcion\n        \n        # Update image if new one is uploaded\n        if imagen_file and imagen_file.filename and imagen_file.filename.strip():\n            proyecto.imagen = imagen_file.read()\n            app.logger.info(f\"Updated main image, size: {len(proyecto.imagen)} bytes\")\n        else:\n            app.logger.info(\"No new main image provided, keeping existing\")\n        \n        # Handle new additional images\n        imagenes_adicionales = request.files.getlist('imagenes_adicionales')\n        if imagenes_adicionales:\n            # Get current max order\n            max_orden = db.session.query(db.func.max(Recurso.orden)).filter_by(proyecto_id=project_id).scalar() or 0\n            orden = max_orden + 1\n            \n            for imagen_adicional in imagenes_adicionales:\n                if imagen_adicional and imagen_adicional.filename and imagen_adicional.filename.strip():\n                    imagen_content = imagen_adicional.read()\n                    if imagen_content:  # Only save if there's actual content\n                        recurso = Recurso()\n                        recurso.proyecto_id = project_id\n                        recurso.tipo = 'imagen'\n                        recurso.nombre = imagen_adicional.filename\n                        recurso.contenido = imagen_content\n                        recurso.orden = orden\n                        db.session.add(recurso)\n                        orden += 1\n        \n        db.session.commit()\n        flash('Proyecto actualizado exitosamente.', 'success')\n        return redirect(url_for('admin'))\n    \n    # GET request - show form with current data\n    project_dict = {\n        'id': proyecto.id,\n        'titulo': proyecto.titulo,\n        'descripcion': proyecto.descripcion\n    }\n    \n    # Add main image if exists\n    if proyecto.imagen:\n        image_data = base64.b64encode(proyecto.imagen).decode('utf-8')\n        project_dict['imagen_base64'] = f\"data:image/jpeg;base64,{image_data}\"\n    else:\n        project_dict['imagen_base64'] = None\n    \n    # Get existing resources\n    recursos = Recurso.query.filter_by(\n        proyecto_id=project_id, \n        tipo='imagen'\n    ).order_by(Recurso.orden, Recurso.id).all()\n    \n    project_dict['recursos'] = []\n    for recurso in recursos:\n        if recurso.contenido:\n            resource_data = base64.b64encode(recurso.contenido).decode('utf-8')\n            project_dict['recursos'].append({\n                'id': recurso.id,\n                'nombre': recurso.nombre,\n                'imagen_base64': f\"data:image/jpeg;base64,{resource_data}\",\n                'orden': recurso.orden\n            })\n    \n    return render_template('project_form.html', project=project_dict, action='Editar')\n\n@app.route('/admin/project/<int:project_id>/delete', methods=['POST'])\n@login_required\ndef delete_project(project_id):\n    \"\"\"Delete project\"\"\"\n    from models import Proyecto\n    \n    proyecto = Proyecto.query.get_or_404(project_id)\n    db.session.delete(proyecto)\n    db.session.commit()\n    \n    flash('Proyecto eliminado exitosamente.', 'success')\n    return redirect(url_for('admin'))\n\n@app.route('/admin/user/new', methods=['GET', 'POST'])\n@admin_required\ndef new_user():\n    \"\"\"Create new user\"\"\"\n    if request.method == 'POST':\n        from models import Usuario\n        \n        username = request.form['username']\n        password = request.form['password']\n        \n        # Check if username already exists\n        existing_user = Usuario.query.filter_by(username=username).first()\n        \n        if existing_user:\n            flash('El nombre de usuario ya existe.', 'error')\n            return render_template('user_form.html', action='Crear')\n        \n        # Create new user\n        password_hash = generate_password_hash(password)\n        usuario = Usuario()\n        usuario.username = username\n        usuario.password_hash = password_hash\n        db.session.add(usuario)\n        db.session.commit()\n        \n        flash('Usuario creado exitosamente.', 'success')\n        return redirect(url_for('admin'))\n    \n    return render_template('user_form.html', action='Crear')\n\n@app.route('/admin/user/<int:user_id>/edit', methods=['GET', 'POST'])\n@admin_required\ndef edit_user(user_id):\n    \"\"\"Edit existing user (admin only)\"\"\"\n    from models import Usuario\n    \n    usuario = Usuario.query.get_or_404(user_id)\n    \n    if request.method == 'POST':\n        username = request.form['username']\n        password = request.form.get('password')\n        \n        # Check if username already exists for other users\n        existing_user = Usuario.query.filter(\n            Usuario.username == username,\n            Usuario.id != user_id\n        ).first()\n        \n        if existing_user:\n            flash('El nombre de usuario ya existe.', 'error')\n            return render_template('user_form.html', user=usuario, action='Editar')\n        \n        # Update user\n        usuario.username = username\n        if password:\n            usuario.password_hash = generate_password_hash(password)\n        \n        db.session.commit()\n        flash('Usuario actualizado exitosamente.', 'success')\n        return redirect(url_for('admin'))\n    \n    return render_template('user_form.html', user=usuario, action='Editar')\n\n@app.route('/admin/user/<int:user_id>/delete', methods=['POST'])\n@admin_required\ndef delete_user(user_id):\n    \"\"\"Delete user (admin only)\"\"\"\n    from models import Usuario\n    \n    usuario = Usuario.query.get_or_404(user_id)\n    \n    if usuario.username == 'admin':\n        flash('No se puede eliminar al usuario administrador.', 'error')\n    else:\n        db.session.delete(usuario)\n        db.session.commit()\n        flash('Usuario eliminado exitosamente.', 'success')\n    \n    return redirect(url_for('admin'))\n\n@app.route('/contact', methods=['POST'])\ndef contact():\n    \"\"\"Handle contact form submission\"\"\"\n    nombre = request.form.get('nombre', '')\n    email = request.form.get('email', '')\n    mensaje = request.form.get('mensaje', '')\n    \n    # In a real application, you would send an email or save to database\n    # For now, just show a success message\n    flash(f'Gracias {nombre}, hemos recibido tu mensaje. Te contactaremos pronto.', 'success')\n    return redirect(url_for('index'))\n\n@app.route('/image/<int:project_id>')\ndef serve_image(project_id):\n    \"\"\"Serve project image from database\"\"\"\n    from models import Proyecto\n    \n    proyecto = Proyecto.query.get_or_404(project_id)\n    \n    if proyecto.imagen:\n        response = make_response(proyecto.imagen)\n        response.headers['Content-Type'] = 'image/jpeg'\n        return response\n    else:\n        # Return a placeholder or 404\n        return '', 404\n\n@app.route('/proyecto/<int:project_id>')\ndef project_detail(project_id):\n    \"\"\"View project details\"\"\"\n    from models import Proyecto, Recurso\n    \n    proyecto = Proyecto.query.get_or_404(project_id)\n    \n    # Convert BLOB image to base64 for display\n    project_dict = {\n        'id': proyecto.id,\n        'titulo': proyecto.titulo,\n        'descripcion': proyecto.descripcion\n    }\n    \n    if proyecto.imagen:\n        image_data = base64.b64encode(proyecto.imagen).decode('utf-8')\n        project_dict['imagen_base64'] = f\"data:image/jpeg;base64,{image_data}\"\n    else:\n        project_dict['imagen_base64'] = None\n    \n    # Get additional resources (images)\n    recursos = Recurso.query.filter_by(\n        proyecto_id=project_id, \n        tipo='imagen'\n    ).order_by(Recurso.orden, Recurso.id).all()\n    \n    project_dict['recursos'] = []\n    for recurso in recursos:\n        if recurso.contenido:\n            resource_data = base64.b64encode(recurso.contenido).decode('utf-8')\n            project_dict['recursos'].append({\n                'id': recurso.id,\n                'nombre': recurso.nombre,\n                'imagen_base64': f\"data:image/jpeg;base64,{resource_data}\",\n                'orden': recurso.orden\n            })\n    \n    # Create combined images list (main image + resources)\n    project_dict['todas_imagenes'] = []\n    if project_dict['imagen_base64']:\n        project_dict['todas_imagenes'].append({\n            'id': 'main',\n            'nombre': 'Imagen principal',\n            'imagen_base64': project_dict['imagen_base64'],\n            'orden': -1\n        })\n    project_dict['todas_imagenes'].extend(project_dict['recursos'])\n    \n    is_authenticated = 'user_id' in session\n    return render_template('project_detail.html', project=project_dict, is_authenticated=is_authenticated)\n\n@app.route('/admin/recurso/<int:recurso_id>/delete', methods=['POST'])\n@login_required\ndef delete_recurso(recurso_id):\n    \"\"\"Delete a project resource\"\"\"\n    from models import Recurso\n    \n    recurso = Recurso.query.get_or_404(recurso_id)\n    project_id = recurso.proyecto_id\n    \n    db.session.delete(recurso)\n    db.session.commit()\n    flash('Recurso eliminado exitosamente.', 'success')\n    \n    if project_id:\n        return redirect(url_for('edit_project', project_id=project_id))\n    else:\n        return redirect(url_for('admin'))\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000, debug=True)\n","size_bytes":18274},"main.py":{"content":"from app import app  # noqa: F401\n","size_bytes":34},"models.py":{"content":"from app import db\nfrom datetime import datetime\nimport base64\n\n\nclass Usuario(db.Model):\n    __tablename__ = 'usuarios'\n    \n    id = db.Column(db.Integer, primary_key=True)\n    username = db.Column(db.String(64), unique=True, nullable=False)\n    password_hash = db.Column(db.String(256), nullable=False)\n    \n    def get_id(self):\n        return str(self.id)\n\n\nclass Proyecto(db.Model):\n    __tablename__ = 'proyectos'\n    \n    id = db.Column(db.Integer, primary_key=True)\n    titulo = db.Column(db.String(200), nullable=False)\n    descripcion = db.Column(db.Text, nullable=False)\n    imagen = db.Column(db.LargeBinary)\n    fecha_creacion = db.Column(db.DateTime, default=datetime.utcnow)\n    \n    # Relationship with recursos\n    recursos = db.relationship('Recurso', backref='proyecto', cascade='all, delete-orphan')\n    \n    @property\n    def imagen_base64(self):\n        \"\"\"Convert image blob to base64 for display\"\"\"\n        if self.imagen:\n            return f\"data:image/jpeg;base64,{base64.b64encode(self.imagen).decode('utf-8')}\"\n        return None\n    \n    @property\n    def todas_imagenes(self):\n        \"\"\"Get all images for this project (main + additional resources)\"\"\"\n        imagenes = []\n        \n        # Add main image first if exists\n        if self.imagen_base64:\n            imagenes.append({\n                'imagen_base64': self.imagen_base64,\n                'nombre': 'Imagen Principal',\n                'tipo': 'principal'\n            })\n        \n        # Add additional images from recursos\n        for recurso in self.recursos:\n            if recurso.tipo == 'imagen' and recurso.imagen_base64:\n                imagenes.append({\n                    'imagen_base64': recurso.imagen_base64,\n                    'nombre': recurso.nombre,\n                    'tipo': 'adicional'\n                })\n        \n        return imagenes\n\n\nclass Recurso(db.Model):\n    __tablename__ = 'recursos'\n    \n    id = db.Column(db.Integer, primary_key=True)\n    proyecto_id = db.Column(db.Integer, db.ForeignKey('proyectos.id'), nullable=False)\n    tipo = db.Column(db.String(50), nullable=False, default='imagen')\n    nombre = db.Column(db.String(200), nullable=False)\n    contenido = db.Column(db.LargeBinary, nullable=False)\n    orden = db.Column(db.Integer, default=0)\n    fecha_creacion = db.Column(db.DateTime, default=datetime.utcnow)\n    \n    @property\n    def imagen_base64(self):\n        \"\"\"Convert image blob to base64 for display\"\"\"\n        if self.contenido:\n            return f\"data:image/jpeg;base64,{base64.b64encode(self.contenido).decode('utf-8')}\"\n        return None\n","size_bytes":2603},"pyproject.toml":{"content":"[project]\nname = \"repl-nix-workspace\"\nversion = \"0.1.0\"\ndescription = \"Add your description here\"\nrequires-python = \">=3.11\"\ndependencies = [\n    \"email-validator>=2.2.0\",\n    \"flask>=3.1.1\",\n    \"flask-sqlalchemy>=3.1.1\",\n    \"gunicorn>=23.0.0\",\n    \"psycopg2-binary>=2.9.10\",\n    \"sqlalchemy>=2.0.43\",\n    \"werkzeug>=3.1.3\",\n]\n","size_bytes":329},"replit.md":{"content":"# Misión Victoriosa\n\n## Overview\n\nMisión Victoriosa is a Flask-based web application for managing community projects. The platform serves as a public showcase for organizational projects while providing administrative capabilities for authenticated users. The application features a clean, accessible design using a light color palette (yellow and blue tones) and supports full CRUD operations for both projects and users.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Template Engine**: Jinja2 templates with Bootstrap 5 for responsive design\n- **Styling**: Custom CSS with CSS variables for consistent theming using the specified light color palette\n- **UI Components**: Font Awesome icons for visual enhancement\n- **Layout**: Master template (base.html) with section-specific templates extending the base\n\n### Backend Architecture\n- **Framework**: Flask web framework with Python\n- **Session Management**: Flask sessions with configurable secret key (fallback to development key)\n- **Authentication**: Username/password authentication with Werkzeug password hashing\n- **File Handling**: Secure filename handling for image uploads with BLOB storage\n- **Database Layer**: Flask-SQLAlchemy ORM with PostgreSQL integration\n- **Migration**: Fully migrated from SQLite to PostgreSQL for production readiness\n\n### Data Storage\n- **Database**: PostgreSQL with three main tables:\n  - `usuarios`: User management with hashed passwords\n  - `proyectos`: Project storage including BLOB image data\n  - `recursos`: Additional project resources (multiple images per project)\n- **Database Initialization**: Automatic table creation via SQLAlchemy models\n- **Data Seeding**: Automated setup script for database and admin user creation\n- **Migration Completed**: August 16, 2025 - Full migration to PostgreSQL and Flask-SQLAlchemy\n\n### Authentication & Authorization\n- **Authentication Method**: Session-based authentication using Flask sessions\n- **Password Security**: Werkzeug password hashing for secure credential storage\n- **Access Control**: \n  - Login required decorators for administrative functions\n  - Admin-only decorators for user management operations\n  - Role-based access: Only 'admin' user can manage other users\n- **User Management**: Admin-only user creation and management (no public registration)\n- **User Roles**: \n  - Admin: Full access to users and projects\n  - Regular Users: Project management only\n\n### Project Management\n- **Image Handling**: Direct BLOB storage in SQLite database with base64 conversion for display\n- **File Upload**: Enhanced drag-and-drop interface with live preview functionality\n- **CRUD Operations**: Full create, read, update, delete functionality for projects\n- **Public Display**: All projects visible to public users without authentication\n- **Enhanced UI**: \n  - Clickable project cards with hover effects\n  - Detailed project view with image modal and comprehensive information\n  - Enriched project creation form with live preview and drag-and-drop upload\n  - Character counter and real-time form validation\n\n## External Dependencies\n\n### Python Packages\n- **Flask**: Web framework for routing and request handling\n- **Werkzeug**: Security utilities for password hashing and file handling\n- **SQLite3**: Database connectivity (built-in Python module)\n\n### Frontend Libraries\n- **Bootstrap 5.1.3**: CSS framework for responsive design and components\n- **Font Awesome 6.0.0**: Icon library for UI enhancement\n\n### Database\n- **PostgreSQL**: Production-ready database with full ACID compliance\n- **Replit Integration**: Configured with Replit's PostgreSQL service\n- **Environment Variables**: DATABASE_URL, PGPORT, PGUSER, PGPASSWORD, PGDATABASE, PGHOST\n- **Migration Status**: Successfully migrated to Replit environment on August 17, 2025\n- **Critical Bug Fix**: August 17, 2025 - Fixed image upload validation logic by making file input fields visible instead of hidden with JavaScript dependency\n\n### Configuration\n- **Environment Variables**: SESSION_SECRET for production security\n- **Development Mode**: Debug mode enabled for development environment\n- **Host Configuration**: Configured for local development (0.0.0.0:5000)","size_bytes":4260},"seed.py":{"content":"from app import app, db\nfrom models import Usuario\nfrom werkzeug.security import generate_password_hash\n\ndef seed_admin_user():\n    \"\"\"Create initial admin user\"\"\"\n    with app.app_context():\n        # Check if admin user already exists\n        existing_admin = Usuario.query.filter_by(username='admin').first()\n        \n        if not existing_admin:\n            # Create admin user\n            password_hash = generate_password_hash('admin123')\n            admin_user = Usuario(username='admin', password_hash=password_hash)\n            db.session.add(admin_user)\n            db.session.commit()\n            print(\"Admin user created successfully!\")\n            print(\"Username: admin\")\n            print(\"Password: admin123\")\n        else:\n            print(\"Admin user already exists.\")\n\nif __name__ == '__main__':\n    seed_admin_user()\n","size_bytes":841},"static/style.css":{"content":"/* Misión Victoriosa - Custom Styles */\n\n:root {\n    /* Light color palette as requested */\n    --primary-yellow: #FFEB3B;\n    --light-yellow: #FFF9C4;\n    --primary-blue: #64B5F6;\n    --light-blue: #BBDEFB;\n    --white: #FFFFFF;\n    --light-gray: #F5F5F5;\n    --medium-gray: #9E9E9E;\n    --dark-gray: #424242;\n}\n\n/* Global Styles */\nbody {\n    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n    background-color: var(--white);\n    color: var(--dark-gray);\n    line-height: 1.6;\n}\n\n/* Login Button Container - Always visible on left */\n.login-button-container {\n    position: fixed;\n    top: 20px;\n    left: 20px;\n    z-index: 1050;\n    box-shadow: 0 2px 10px rgba(0,0,0,0.1);\n    border-radius: 8px;\n}\n\n.login-button-container .btn {\n    border-radius: 8px;\n    padding: 10px 15px;\n    font-weight: 500;\n    box-shadow: 0 2px 5px rgba(0,0,0,0.1);\n}\n\n/* Navbar Customization */\n.navbar-brand {\n    color: var(--primary-blue) !important;\n    font-size: 1.5rem;\n}\n\n.navbar-nav .nav-link {\n    color: var(--dark-gray) !important;\n    font-weight: 500;\n    margin: 0 10px;\n    transition: color 0.3s ease;\n}\n\n.navbar-nav .nav-link:hover {\n    color: var(--primary-blue) !important;\n}\n\n/* Hero Section */\n.hero-section {\n    background: linear-gradient(135deg, var(--light-blue) 0%, var(--light-yellow) 100%);\n    color: var(--dark-gray);\n    margin-top: 0;\n}\n\n.hero-section h1 {\n    color: var(--primary-blue);\n    margin-bottom: 20px;\n}\n\n/* Cards */\n.card {\n    border: none;\n    border-radius: 12px;\n    transition: transform 0.3s ease, box-shadow 0.3s ease;\n}\n\n.card:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 8px 25px rgba(0,0,0,0.1);\n}\n\n.card-header {\n    border-radius: 12px 12px 0 0 !important;\n    border: none;\n}\n\n/* Project Cards */\n.project-card {\n    overflow: hidden;\n}\n\n.project-image {\n    height: 200px;\n    object-fit: cover;\n    transition: transform 0.3s ease;\n}\n\n.project-card:hover .project-image {\n    transform: scale(1.05);\n}\n\n.clickable-card {\n    cursor: pointer;\n    transition: all 0.3s ease;\n}\n\n.clickable-card:hover {\n    transform: translateY(-5px);\n    box-shadow: 0 12px 30px rgba(0,0,0,0.15);\n}\n\n.card-actions {\n    opacity: 0;\n    transition: opacity 0.3s ease;\n}\n\n.clickable-card:hover .card-actions {\n    opacity: 1;\n}\n\n/* Buttons */\n.btn-primary {\n    background-color: var(--primary-blue);\n    border-color: var(--primary-blue);\n    border-radius: 8px;\n    font-weight: 500;\n    padding: 10px 20px;\n    transition: all 0.3s ease;\n}\n\n.btn-primary:hover {\n    background-color: #42A5F5;\n    border-color: #42A5F5;\n    transform: translateY(-1px);\n    box-shadow: 0 4px 12px rgba(100, 181, 246, 0.3);\n}\n\n.btn-success {\n    background-color: #4CAF50;\n    border-color: #4CAF50;\n    border-radius: 8px;\n}\n\n.btn-warning {\n    background-color: var(--primary-yellow);\n    border-color: var(--primary-yellow);\n    color: var(--dark-gray);\n    border-radius: 8px;\n}\n\n/* Forms */\n.form-control {\n    border-radius: 8px;\n    border: 2px solid #E0E0E0;\n    padding: 12px 15px;\n    transition: border-color 0.3s ease, box-shadow 0.3s ease;\n}\n\n.form-control:focus {\n    border-color: var(--primary-blue);\n    box-shadow: 0 0 0 0.2rem rgba(100, 181, 246, 0.25);\n}\n\n.input-group-text {\n    background-color: var(--light-gray);\n    border: 2px solid #E0E0E0;\n    border-radius: 8px 0 0 8px;\n    color: var(--medium-gray);\n}\n\n/* Sections */\nsection {\n    scroll-margin-top: 80px;\n}\n\n#sobre-nosotros {\n    background-color: var(--white);\n}\n\n#proyectos {\n    background-color: var(--light-gray);\n}\n\n#contacto {\n    background-color: var(--white);\n}\n\n/* Text Colors */\n.text-primary {\n    color: var(--primary-blue) !important;\n}\n\n.text-warning {\n    color: var(--primary-yellow) !important;\n}\n\n/* Admin Panel Styles */\n.table {\n    background-color: var(--white);\n    border-radius: 8px;\n    overflow: hidden;\n    box-shadow: 0 2px 10px rgba(0,0,0,0.05);\n}\n\n.table thead th {\n    background-color: var(--light-gray);\n    border: none;\n    color: var(--dark-gray);\n    font-weight: 600;\n    padding: 15px;\n}\n\n.table tbody td {\n    border: none;\n    padding: 15px;\n    vertical-align: middle;\n}\n\n.table tbody tr {\n    border-bottom: 1px solid #F0F0F0;\n}\n\n.table tbody tr:hover {\n    background-color: var(--light-gray);\n}\n\n/* Badges */\n.badge {\n    font-size: 0.75em;\n    padding: 6px 10px;\n    border-radius: 20px;\n}\n\n/* Footer */\nfooter {\n    background-color: var(--light-gray) !important;\n    border-top: 1px solid #E0E0E0;\n    margin-top: 50px;\n}\n\n/* Alerts */\n.alert {\n    border: none;\n    border-radius: 10px;\n    padding: 15px 20px;\n}\n\n.alert-success {\n    background-color: #E8F5E8;\n    color: #2E7D2E;\n}\n\n.alert-danger {\n    background-color: #FFEBEE;\n    color: #C62828;\n}\n\n/* Responsive adjustments */\n@media (max-width: 768px) {\n    .login-button-container {\n        top: 10px;\n        left: 10px;\n    }\n    \n    .login-button-container .btn {\n        padding: 8px 12px;\n        font-size: 0.9rem;\n    }\n    \n    .hero-section h1 {\n        font-size: 2rem;\n    }\n    \n    .hero-section p {\n        font-size: 1rem;\n    }\n}\n\n@media (max-width: 576px) {\n    .container {\n        padding-left: 15px;\n        padding-right: 15px;\n    }\n    \n    .card-body {\n        padding: 20px;\n    }\n    \n    .btn-group .btn {\n        font-size: 0.8rem;\n        padding: 5px 10px;\n    }\n}\n\n/* Loading states */\n.btn:disabled {\n    opacity: 0.6;\n    cursor: not-allowed;\n}\n\n/* Image upload preview */\n#imagePreview img {\n    border-radius: 8px;\n    max-width: 100%;\n    height: auto;\n}\n\n/* Smooth scrolling */\nhtml {\n    scroll-behavior: smooth;\n}\n\n/* Focus styles for accessibility */\n.btn:focus,\n.form-control:focus,\n.nav-link:focus {\n    outline: 2px solid var(--primary-blue);\n    outline-offset: 2px;\n}\n\n/* Animation for cards */\n@keyframes fadeInUp {\n    from {\n        opacity: 0;\n        transform: translateY(30px);\n    }\n    to {\n        opacity: 1;\n        transform: translateY(0);\n    }\n}\n\n.card {\n    animation: fadeInUp 0.6s ease-out;\n}\n\n/* Custom scrollbar */\n::-webkit-scrollbar {\n    width: 8px;\n}\n\n::-webkit-scrollbar-track {\n    background: var(--light-gray);\n}\n\n::-webkit-scrollbar-thumb {\n    background: var(--medium-gray);\n    border-radius: 4px;\n}\n\n::-webkit-scrollbar-thumb:hover {\n    background: var(--dark-gray);\n}\n\n/* Project carousel styling */\n.project-carousel {\n    position: relative;\n}\n\n.project-carousel .carousel-inner {\n    border-radius: 8px 8px 0 0;\n}\n\n.project-carousel .carousel-control-prev,\n.project-carousel .carousel-control-next {\n    width: 30px;\n    height: 30px;\n    top: 50%;\n    transform: translateY(-50%);\n    background: rgba(0, 0, 0, 0.5);\n    border-radius: 50%;\n    opacity: 0;\n    transition: opacity 0.3s ease;\n}\n\n.project-carousel .carousel-control-prev {\n    left: 10px;\n}\n\n.project-carousel .carousel-control-next {\n    right: 10px;\n}\n\n.project-card:hover .carousel-control-prev,\n.project-card:hover .carousel-control-next {\n    opacity: 1;\n}\n\n.project-carousel .carousel-control-prev-icon,\n.project-carousel .carousel-control-next-icon {\n    width: 16px;\n    height: 16px;\n}\n\n.project-carousel .carousel-indicators {\n    bottom: 10px;\n    margin-bottom: 0;\n}\n\n.project-carousel .carousel-indicators button {\n    width: 8px;\n    height: 8px;\n    border-radius: 50%;\n    margin: 0 2px;\n    opacity: 0.5;\n}\n\n.project-carousel .carousel-indicators button.active {\n    opacity: 1;\n}\n\n.image-counter {\n    position: absolute;\n    top: 10px;\n    right: 10px;\n    z-index: 10;\n}\n\n.image-counter .badge {\n    font-size: 0.7rem;\n    opacity: 0.9;\n}\n","size_bytes":7545},"setup.py":{"content":"\"\"\"\nScript de configuración automática para Misión Victoriosa\nConfigura la base de datos y crea el usuario administrador si no existen\n\"\"\"\n\nimport os\nfrom app import app, db\nfrom models import Usuario\nfrom werkzeug.security import generate_password_hash\n\n\ndef setup_database():\n    \"\"\"Configura la base de datos y crea tablas si no existen\"\"\"\n    with app.app_context():\n        try:\n            # Crear todas las tablas\n            db.create_all()\n            print(\"✓ Base de datos configurada correctamente\")\n            \n            # Verificar si existe el usuario admin\n            admin_user = Usuario.query.filter_by(username='admin').first()\n            \n            if not admin_user:\n                # Crear usuario administrador\n                password_hash = generate_password_hash('admin123')\n                admin = Usuario(username='admin', password_hash=password_hash)\n                db.session.add(admin)\n                db.session.commit()\n                \n                print(\"✓ Usuario administrador creado\")\n                print(\"  Username: admin\")\n                print(\"  Password: admin123\")\n            else:\n                print(\"✓ Usuario administrador ya existe\")\n                \n        except Exception as e:\n            print(f\"Error configurando la base de datos: {str(e)}\")\n            return False\n            \n    return True\n\n\ndef check_environment():\n    \"\"\"Verifica que las variables de entorno estén configuradas\"\"\"\n    required_vars = ['DATABASE_URL']\n    missing_vars = []\n    \n    for var in required_vars:\n        if not os.environ.get(var):\n            missing_vars.append(var)\n    \n    if missing_vars:\n        print(f\"⚠️  Variables de entorno faltantes: {', '.join(missing_vars)}\")\n        return False\n    \n    print(\"✓ Variables de entorno configuradas\")\n    return True\n\n\nif __name__ == '__main__':\n    print(\"🚀 Configurando Misión Victoriosa...\")\n    \n    # Verificar entorno\n    if not check_environment():\n        print(\"❌ Error: Variables de entorno no configuradas\")\n        exit(1)\n    \n    # Configurar base de datos\n    if setup_database():\n        print(\"✅ Configuración completada exitosamente\")\n    else:\n        print(\"❌ Error durante la configuración\")\n        exit(1)","size_bytes":2267}}}